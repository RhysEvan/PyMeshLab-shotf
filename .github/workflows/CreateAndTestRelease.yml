name: CreateAndTestRelease

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New PyMeshLab Version'
        required: true
        default: '0.2.1'
      meshlab_is_nightly:
        description: 'MeshLab version is nightly'
        required: true
        default: 'false'
      meshlab_is_rc:
        description: 'MeshLab version is RC'
        required: true
        default: 'false'

jobs:
  update_version:
    name: Update Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Update PYML_VERSION
      run: |
        echo ${{ github.event.inputs.version }} | tr -d '\n'> PYML_VERSION
    - name: Commit change
      uses: stefanzweifel/git-auto-commit-action@v4.1.1
      with:
        commit_message: Update PYML_VERSION to ${{ github.event.inputs.version }}

  #first, we build PyMeshLab
  build_pymeshlab:
    name: Build PyMeshLab
    runs-on: ${{ matrix.os }}
    needs: update_version
    strategy:
      matrix:
        os: [ubuntu-16.04, macos-latest, windows-latest]
        pyversion: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: master
        submodules: recursive
    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
    - name: Install Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y mesa-common-dev libglu1-mesa-dev libgmp-dev
        #needed by qt 5.15 on linux
        sudo apt-get install libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-render-util0-dev libxcb-xinerama0-dev
    - name: Install MacOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install libomp
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri "http://mirrors.ukfast.co.uk/sites/qt.io/official_releases/jom/jom_1_1_3.zip" -OutFile "jom_1_1_3.zip"
        New-Item -Name "jom" -ItemType "directory"
        Expand-Archive -Path jom_1_1_3.zip -DestinationPath .\jom
        echo "$(Get-Location)\jom" >> GITHUB_PATH
        echo "name=VCINSTALLDIR::C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC" >> $GITHUB_ENV
    - name: Environment variables
      id: envs
      shell: bash
      run: |
        cd src/meshlab
        echo  ::set-output name=meshlab_commit::$(git rev-parse --short HEAD)
    - name: Set MeshLab options
      id: meshlab-options
      shell: bash
      run: |
        if [ "${{ github.event.inputs.meshlab_is_nightly }}" == "true" ]; then
          echo ::set-output name=meshlab-nightly-option::"-n"
        else
          echo ::set-output name=meshlab-nightly-option::""
        fi
        if [ "${{ github.event.inputs.meshlab_is_rc }}" == "true" ]; then
          echo ::set-output name=meshlab-rc-option::"-rc"
        else
          echo ::set-output name=meshlab-rc-option::""
        fi
    - name: Build PyMeshLab ${{ matrix.pyversion }}
      shell: bash
      run: |
        sh scripts/${{ runner.os }}/1_build.sh ${{steps.meshlab-options.outputs.meshlab-rc-option}} ${{steps.meshlab-options.outputs.meshlab-nightly-option}}
    - name: Deploy PyMeshLab ${{ matrix.pyversion }}
      shell: bash
      run: |
        sh scripts/${{ runner.os }}/2_deploy.sh
    - name: Upload PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
      uses: actions/upload-artifact@v2
      with:
        name: PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
        path: pymeshlab

  #after building PyMeshLab for the three platforms, we create a release in github
  create_release:
    name: Create Release
    needs: build_pymeshlab
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Publish Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: 'PyMeshLab v${{ github.event.inputs.version }}'
        draft: false
        prerelease: false

  #then, we will upload all the artifacts to the release
  upload_release:
    name: Upload Release
    needs: [create_release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
        pyversion: [3.6, 3.7, 3.8, 3.9]
    steps:
    #download
    - name: Download PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
      uses: actions/download-artifact@v1
      with:
        name: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
        path: pymeshlab/
    - name: Create PyMeshLab Archive
      run: |
        cd pymeshlab
        zip -r ../PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip *
    #upload
    - name: Upload PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{needs.create_release.outputs.upload_url}}
        asset_path: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip
        asset_name: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip
        asset_content_type: PyMeshLab ${{ matrix.pyversion }}

  #and then, we test the last release
  #WARNING: setup.py needs to download the release from THIS repository
  #default is cnr-isti-vclab/PyMeshLab, but if you are testing a release in a forked
  #repo, you need to update also master/setup.py file
  test_release_pymeshlab:
    name: Test PyMeshLab
    needs: [upload_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        pyversion: [3.6, 3.7, 3.8, 3.9]
    steps:
    - name: Install Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install PyMeshLab
      run: |
        pip install git+https://github.com/${{ github.repository }}
    - name: Run Tests ${{ matrix.pyversion }}
      run: |
        pip install pytest
        python -c 'import pymeshlab; pymeshlab.use_cpu_opengl()' #just for windows
        pytest -s --pyargs pymeshlab

  build_wheel:
    name: Build Wheel
    needs: upload_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        pyversion: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Install Python ${{ matrix.pyversion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.pyversion }}
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Build Wheel
        shell: bash
        run: |
          pip install wheel
          pip wheel . -w wheels/
      - name: Upload wheel ${{ matrix.os }} python ${{ matrix.pyversion }}
        uses: actions/upload-artifact@v2
        with:
          name: pymeshlab_whl_${{ runner.os }}_python${{ matrix.pyversion }}
          path: wheels/pymeshlab*.whl

  test_wheel:
    name: Test Wheel ans Upload
    needs: [create_release, build_wheel]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        pyversion: [3.6, 3.7, 3.8, 3.9]
    steps:
    - name: Download pymeshlab_whl_${{ runner.os }}_python${{ matrix.pyversion }}
      uses: actions/download-artifact@v2
      with:
        name: pymeshlab_whl_${{ runner.os }}_python${{ matrix.pyversion }}
        path: .
    - name: Install Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install and Test Wheel
      shell: bash
      run: |
        pip install pytest
        pip install pymeshlab*.whl
        python -c 'import pymeshlab; pymeshlab.use_cpu_opengl()' #just for windows
        pytest --pyargs pymeshlab
    - name: Get Wheel Name
      id: wheel_name
      shell: bash
      run: |
        NAME=$(ls -d pymeshlab*.whl)
        echo  ::set-output name=wname::$(ls -d pymeshlab*.whl)
    - name: Upload Wheel to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{needs.create_release.outputs.upload_url}}
        asset_path: ${{steps.wheel_name.outputs.wname}}
        asset_name: ${{steps.wheel_name.outputs.wname}}
        asset_content_type: PyMeshLab ${{ matrix.pyversion }}
